

##### MySQL MyISAM


mysql> explain extended select x, avg(y) as ym  from d  group by x order by ym desc  limit 5;
+----+-------------+-------+------+---------------+------+---------+------+-----------+----------+---------------------------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows      | filtered | Extra                           |
+----+-------------+-------+------+---------------+------+---------+------+-----------+----------+---------------------------------+
|  1 | SIMPLE      | d     | ALL  | NULL          | NULL | NULL    | NULL | 100000000 |   100.00 | Using temporary; Using filesort |
+----+-------------+-------+------+---------------+------+---------+------+-----------+----------+---------------------------------+
1 row in set, 1 warning (0.00 sec)


mysql>  explain extended select count(*) as cnt  from d inner join dm on d.x = dm.x;
+----+-------------+-------+------+---------------+------+---------+------------+-----------+----------+--------------------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref        | rows      | filtered | Extra                    |
+----+-------------+-------+------+---------------+------+---------+------------+-----------+----------+--------------------------+
|  1 | SIMPLE      | d     | ALL  | NULL          | NULL | NULL    | NULL       | 100000000 |   100.00 |                          |
|  1 | SIMPLE      | dm    | ref  | ixm           | ixm  | 5       | benchm.d.x |         1 |   100.00 | Using where; Using index |
+----+-------------+-------+------+---------------+------+---------+------------+-----------+----------+--------------------------+





##### MySQL InnoDB


mysql> explain extended select x, avg(y) as ym  from d  group by x order by ym desc  limit 5;
+----+-------------+-------+------+---------------+------+---------+------+-----------+----------+---------------------------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows      | filtered | Extra                           |
+----+-------------+-------+------+---------------+------+---------+------+-----------+----------+---------------------------------+
|  1 | SIMPLE      | d     | ALL  | NULL          | NULL | NULL    | NULL | 100000319 |   100.00 | Using temporary; Using filesort |
+----+-------------+-------+------+---------------+------+---------+------+-----------+----------+---------------------------------+
1 row in set, 1 warning (0.01 sec)


mysql> explain extended select count(*) as cnt  from d inner join dm on d.x = dm.x;
+----+-------------+-------+------+---------------+------+---------+------------+-----------+----------+--------------------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref        | rows      | filtered | Extra                    |
+----+-------------+-------+------+---------------+------+---------+------------+-----------+----------+--------------------------+
|  1 | SIMPLE      | d     | ALL  | NULL          | NULL | NULL    | NULL       | 100000319 |   100.00 |                          |
|  1 | SIMPLE      | dm    | ref  | ixm           | ixm  | 5       | benchm.d.x |         1 |   100.00 | Using where; Using index |
+----+-------------+-------+------+---------------+------+---------+------------+-----------+----------+--------------------------+
2 rows in set, 1 warning (0.00 sec)




###### PostgreSQL


postgres=# explain select x, avg(y) as ym  from d  group by x order by ym desc  limit 5;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit  (cost=24151458.52..24151458.53 rows=5 width=12)
   ->  Sort  (cost=24151458.52..24153916.54 rows=983208 width=12)
         Sort Key: (avg(y))
         ->  GroupAggregate  (cost=23372848.55..24135127.79 rows=983208 width=12)
               ->  Sort  (cost=23372848.55..23622844.93 rows=99998552 width=12)
                     Sort Key: x
                     ->  Seq Scan on d  (cost=0.00..1540526.52 rows=99998552 width=12)
(7 rows)


postgres=# explain select count(*) as cnt  from d inner join dm on d.x = dm.x;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=4356476.56..4356476.57 rows=1 width=0)
   ->  Hash Join  (cost=30832.00..4106480.18 rows=99998552 width=0)
         Hash Cond: (d.x = dm.x)
         ->  Seq Scan on d  (cost=0.00..1540526.52 rows=99998552 width=4)
         ->  Hash  (cost=14425.00..14425.00 rows=1000000 width=4)
               ->  Seq Scan on dm  (cost=0.00..14425.00 rows=1000000 width=4)
(6 rows)





###### Impala


[localhost:21000] > explain select x, avg(y) as ym  from d  group by x order by ym desc  limit 5;
Query: explain select x, avg(y) as ym  from d  group by x order by ym desc  limit 5
+------------------------------------------------------------------------------------+
| Explain String                                                                     |
+------------------------------------------------------------------------------------+
| Estimated Per-Host Requirements: Memory=2.00GB VCores=2                            |
| WARNING: The following tables are missing relevant table and/or column statistics. |
| benchm.d                                                                           |
|                                                                                    |
| 05:MERGING-EXCHANGE [UNPARTITIONED]                                                |
| |  order by: avg(y) DESC                                                           |
| |  limit: 5                                                                        |
| |                                                                                  |
| 02:TOP-N [LIMIT=5]                                                                 |
| |  order by: avg(y) DESC                                                           |
| |                                                                                  |
| 04:AGGREGATE [FINALIZE]                                                            |
| |  output: avg:merge(y)                                                            |
| |  group by: x                                                                     |
| |                                                                                  |
| 03:EXCHANGE [HASH(x)]                                                              |
| |                                                                                  |
| 01:AGGREGATE                                                                       |
| |  output: avg(y)                                                                  |
| |  group by: x                                                                     |
| |                                                                                  |
| 00:SCAN HDFS [benchm.d]                                                            |
|    partitions=1/1 files=1 size=2.32GB                                              |
+------------------------------------------------------------------------------------+
Fetched 23 row(s) in 0.02s


[localhost:21000] > explain select count(*) as cnt  from d inner join dm on d.x = dm.x;
Query: explain select count(*) as cnt  from d inner join dm on d.x = dm.x
+------------------------------------------------------------------------------------+
| Explain String                                                                     |
+------------------------------------------------------------------------------------+
| Estimated Per-Host Requirements: Memory=3.88GB VCores=2                            |
| WARNING: The following tables are missing relevant table and/or column statistics. |
| benchm.d, benchm.dm                                                                |
|                                                                                    |
| 06:AGGREGATE [FINALIZE]                                                            |
| |  output: count:merge(*)                                                          |
| |                                                                                  |
| 05:EXCHANGE [UNPARTITIONED]                                                        |
| |                                                                                  |
| 03:AGGREGATE                                                                       |
| |  output: count(*)                                                                |
| |                                                                                  |
| 02:HASH JOIN [INNER JOIN, BROADCAST]                                               |
| |  hash predicates: d.x = dm.x                                                     |
| |                                                                                  |
| |--04:EXCHANGE [BROADCAST]                                                         |
| |  |                                                                               |
| |  01:SCAN HDFS [benchm.dm]                                                        |
| |     partitions=1/1 files=1 size=6.57MB                                           |
| |                                                                                  |
| 00:SCAN HDFS [benchm.d]                                                            |
|    partitions=1/1 files=1 size=2.32GB                                              |
+------------------------------------------------------------------------------------+
Fetched 22 row(s) in 0.01s





##### Hive


hive> explain select x, avg(y) as ym  from d  group by x order by ym desc  limit 5;
OK
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-2 depends on stages: Stage-1
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: d
            Statistics: Num rows: 311108576 Data size: 2488868608 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: x (type: int), y (type: float)
              outputColumnNames: x, y
              Statistics: Num rows: 311108576 Data size: 2488868608 Basic stats: COMPLETE Column stats: NONE
              Group By Operator
                aggregations: avg(y)
                keys: x (type: int)
                mode: hash
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 311108576 Data size: 2488868608 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 311108576 Data size: 2488868608 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col1 (type: struct<count:bigint,sum:double,input:float>)
      Reduce Operator Tree:
        Group By Operator
          aggregations: avg(VALUE._col0)
          keys: KEY._col0 (type: int)
          mode: mergepartial
          outputColumnNames: _col0, _col1
          Statistics: Num rows: 155554288 Data size: 1244434304 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: int), _col1 (type: double)
            outputColumnNames: _col0, _col1
            Statistics: Num rows: 155554288 Data size: 1244434304 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              table:
                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            Reduce Output Operator
              key expressions: _col1 (type: double)
              sort order: -
              Statistics: Num rows: 155554288 Data size: 1244434304 Basic stats: COMPLETE Column stats: NONE
              value expressions: _col0 (type: int), _col1 (type: double)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 155554288 Data size: 1244434304 Basic stats: COMPLETE Column stats: NONE
          Limit
            Number of rows: 5
            Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 5 Data size: 40 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: 5

Time taken: 0.059 seconds, Fetched: 73 row(s)


hive> explain select count(*) as cnt  from d inner join dm on d.x = dm.x;
OK
STAGE DEPENDENCIES:
  Stage-5 is a root stage
  Stage-2 depends on stages: Stage-5
  Stage-0 is a root stage

STAGE PLANS:
  Stage: Stage-5
    Map Reduce Local Work
      Alias -> Map Local Tables:
        dm 
          Fetch Operator
            limit: -1
      Alias -> Map Local Operator Tree:
        dm 
          TableScan
            alias: dm
            Statistics: Num rows: 1722224 Data size: 6888896 Basic stats: COMPLETE Column stats: NONE
            HashTable Sink Operator
              condition expressions:
                0 
                1 
              keys:
                0 x (type: int)
                1 x (type: int)

  Stage: Stage-2
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: d
            Statistics: Num rows: 622217152 Data size: 2488868608 Basic stats: COMPLETE Column stats: NONE
            Map Join Operator
              condition map:
                   Inner Join 0 to 1
              condition expressions:
                0 
                1 
              keys:
                0 x (type: int)
                1 x (type: int)
              Statistics: Num rows: 684438912 Data size: 2737755648 Basic stats: COMPLETE Column stats: NONE
              Select Operator
                Statistics: Num rows: 684438912 Data size: 2737755648 Basic stats: COMPLETE Column stats: NONE
                Group By Operator
                  aggregations: count()
                  mode: hash
                  outputColumnNames: _col0
                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                  Reduce Output Operator
                    sort order: 
                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
                    value expressions: _col0 (type: bigint)
      Local Work:
        Map Reduce Local Work
      Reduce Operator Tree:
        Group By Operator
          aggregations: count(VALUE._col0)
          mode: mergepartial
          outputColumnNames: _col0
          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
          Select Operator
            expressions: _col0 (type: bigint)
            outputColumnNames: _col0
            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
            File Output Operator
              compressed: false
              Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE
              table:
                  input format: org.apache.hadoop.mapred.TextInputFormat
                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1

Time taken: 0.082 seconds, Fetched: 76 row(s)







######### Spark SQL


explain select x, avg(y) as ym  from d  group by x order by ym desc  limit 5;

== Physical Plan ==
TakeOrdered 5, [ym#23 DESC]
 Aggregate false, [x#29], [x#29,(CAST(SUM(PartialSum#33), DoubleType) / CAST(SUM(PartialCount#34L), DoubleType)) AS ym#23]
  Exchange (HashPartitioning [x#29], 200)
   Aggregate true, [x#29], [x#29,COUNT(CAST(y#30, DoubleType)) AS PartialCount#34L,SUM(CAST(y#30, DoubleType)) AS PartialSum#33]
    HiveTableScan [x#29,y#30], (MetastoreRelation benchm, d, None), None
Time taken: 0.3 seconds


-- cached:

== Physical Plan ==
TakeOrdered 5, [ym#105 DESC]
 Aggregate false, [x#111], [x#111,(CAST(SUM(PartialSum#125), DoubleType) / CAST(SUM(PartialCount#126L), DoubleType)) AS ym#105]
  Exchange (HashPartitioning [x#111], 200)
   Aggregate true, [x#111], [x#111,COUNT(CAST(y#112, DoubleType)) AS PartialCount#126L,SUM(CAST(y#112, DoubleType)) AS PartialSum#125]
    InMemoryColumnarTableScan [x#111,y#112], [], (InMemoryRelation [x#111,y#112], true, 10000, StorageLevel(true, true, false, true, 1), (HiveTableScan [x#57,y#58], (MetastoreRelation benchm, d, None), None), Some(d))




explain select count(*) as cnt  from d inner join dm on d.x = dm.x;

== Physical Plan ==
Aggregate false, [], [Coalesce(SUM(PartialCount#51L),0) AS cnt#41L]
 Exchange SinglePartition
  Aggregate true, [], [COUNT(1) AS PartialCount#51L]
   Project []
    ShuffledHashJoin [x#47], [x#49], BuildRight
     Exchange (HashPartitioning [x#47], 200)
      HiveTableScan [x#47], (MetastoreRelation benchm, d, None), None
     Exchange (HashPartitioning [x#49], 200)
      HiveTableScan [x#49], (MetastoreRelation benchm, dm, None), None
Time taken: 0.426 seconds


-- cached:

== Physical Plan ==
Aggregate false, [], [Coalesce(SUM(PartialCount#158L),0) AS cnt#133L]
 Exchange SinglePartition
  Aggregate true, [], [COUNT(1) AS PartialCount#158L]
   Project []
    BroadcastHashJoin [x#139], [x#141], BuildRight
     InMemoryColumnarTableScan [x#139], [], (InMemoryRelation [x#139,y#140], true, 10000, StorageLevel(true, true, false, true, 1), (HiveTableScan [x#57,y#58], (MetastoreRelation benchm, d, None), None), Some(d))
     InMemoryColumnarTableScan [x#141], [], (InMemoryRelation [x#141], true, 10000, StorageLevel(true, true, false, true, 1), (HiveTableScan [x#87], (MetastoreRelation benchm, dm, None), None), Some(dm))
Time taken: 0.225 seconds



